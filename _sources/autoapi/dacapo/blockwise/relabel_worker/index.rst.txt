:py:mod:`dacapo.blockwise.relabel_worker`
=========================================

.. py:module:: dacapo.blockwise.relabel_worker


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   dacapo.blockwise.relabel_worker.cli
   dacapo.blockwise.relabel_worker.start_worker
   dacapo.blockwise.relabel_worker.relabel_in_block
   dacapo.blockwise.relabel_worker.find_components
   dacapo.blockwise.relabel_worker.read_cross_block_merges
   dacapo.blockwise.relabel_worker.spawn_worker



Attributes
~~~~~~~~~~

.. autoapisummary::

   dacapo.blockwise.relabel_worker.fit
   dacapo.blockwise.relabel_worker.read_write_conflict


.. py:function:: cli(log_level)


.. py:data:: fit
   :value: 'shrink'

   

.. py:data:: read_write_conflict
   :value: False

   

.. py:function:: start_worker(output_container, output_dataset, tmpdir, *args, **kwargs)


.. py:function:: relabel_in_block(array_out, old_values, new_values, block)


.. py:function:: find_components(nodes, edges)


.. py:function:: read_cross_block_merges(tmpdir)


.. py:function:: spawn_worker(output_array_identifier: dacapo.store.array_store.LocalArrayIdentifier, tmpdir: str, compute_context: dacapo.compute_context.ComputeContext = LocalTorch(), *args, **kwargs)

   Spawn a worker to predict on a given dataset.

   :param output_array_identifier: The output array identifier
   :type output_array_identifier: LocalArrayIdentifier
   :param tmpdir: The temporary directory
   :type tmpdir: str
   :param compute_context: The compute context. Defaults to LocalTorch().
   :type compute_context: ComputeContext, optional


