:py:mod:`dacapo.store.array_store`
==================================

.. py:module:: dacapo.store.array_store


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.store.array_store.LocalArrayIdentifier
   dacapo.store.array_store.LocalContainerIdentifier
   dacapo.store.array_store.ArrayStore




.. py:class:: LocalArrayIdentifier


   .. py:attribute:: container
      :type: pathlib.Path

      

   .. py:attribute:: dataset
      :type: str

      


.. py:class:: LocalContainerIdentifier


   .. py:attribute:: container
      :type: pathlib.Path

      

   .. py:method:: array_identifier(dataset) -> LocalArrayIdentifier



.. py:class:: ArrayStore




   Base class for array stores.

   Creates identifiers for the caller to create and write arrays. Provides
   only rudimentary support for IO itself (currently only to remove
   arrays).

   .. py:method:: validation_prediction_array(run_name: str, iteration: int, dataset: str) -> LocalArrayIdentifier
      :abstractmethod:

      Get the array identifier for a particular validation prediction.


   .. py:method:: validation_output_array(run_name: str, iteration: int, parameters: str, dataset: str) -> LocalArrayIdentifier
      :abstractmethod:

      Get the array identifier for a particular validation output.


   .. py:method:: validation_input_arrays(run_name: str, index: Optional[str] = None) -> Tuple[LocalArrayIdentifier, LocalArrayIdentifier]
      :abstractmethod:

      Get an array identifiers for the validation input raw/gt.

      It would be nice to store raw/gt with the validation predictions/outputs.
      If we don't store these we would have to look up the datasplit config
      and figure out where to find the inputs for each run. If we write
      the data then we don't need to search for it.
      This convenience comes at the cost of some extra memory usage.


   .. py:method:: remove(array_identifier: LocalArrayIdentifier) -> None
      :abstractmethod:

      Remove an array by its identifier.


   .. py:method:: snapshot_container(run_name: str) -> LocalContainerIdentifier
      :abstractmethod:

      Get a container identifier for storage of a snapshot.


   .. py:method:: validation_container(run_name: str) -> LocalContainerIdentifier
      :abstractmethod:

      Get a container identifier for storage of a snapshot.



