:py:mod:`dacapo.store.config_store`
===================================

.. py:module:: dacapo.store.config_store


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.store.config_store.ConfigStore




.. py:exception:: DuplicateNameError




   Common base class for all non-exit exceptions.


.. py:class:: ConfigStore




   Base class for configuration stores.

   .. py:property:: runs
      :abstractmethod:


   .. py:property:: datasplits
      :abstractmethod:


   .. py:property:: datasets
      :abstractmethod:


   .. py:property:: arrays
      :abstractmethod:


   .. py:property:: tasks
      :abstractmethod:


   .. py:property:: trainers
      :abstractmethod:


   .. py:property:: architectures
      :abstractmethod:


   .. py:method:: delete_config(database, config_name: str) -> None
      :abstractmethod:


   .. py:method:: store_run_config(run_config: dacapo.experiments.run_config.RunConfig) -> None
      :abstractmethod:

      Store a run config. This should also store the configs that are part
      of the run config (i.e., task, architecture, trainer, and dataset
      config).


   .. py:method:: retrieve_run_config(run_name: str) -> dacapo.experiments.run_config.RunConfig
      :abstractmethod:

      Retrieve a run config from a run name.


   .. py:method:: retrieve_run_config_names() -> List[str]
      :abstractmethod:

      Retrieve all run config names.


   .. py:method:: delete_run_config(run_name: str) -> None


   .. py:method:: store_task_config(task_config: dacapo.experiments.tasks.task_config.TaskConfig) -> None
      :abstractmethod:

      Store a task config.


   .. py:method:: retrieve_task_config(task_name: str) -> dacapo.experiments.tasks.task_config.TaskConfig
      :abstractmethod:

      Retrieve a task config from a task name.


   .. py:method:: retrieve_task_config_names() -> List[str]
      :abstractmethod:

      Retrieve all task config names.


   .. py:method:: delete_task_config(task_name: str) -> None


   .. py:method:: store_architecture_config(architecture_config: dacapo.experiments.architectures.architecture_config.ArchitectureConfig) -> None
      :abstractmethod:

      Store a architecture config.


   .. py:method:: retrieve_architecture_config(architecture_name: str) -> dacapo.experiments.architectures.architecture_config.ArchitectureConfig
      :abstractmethod:

      Retrieve a architecture config from a architecture name.


   .. py:method:: retrieve_architecture_config_names() -> List[str]
      :abstractmethod:

      Retrieve all architecture config names.


   .. py:method:: delete_architecture_config(architecture_name: str) -> None


   .. py:method:: store_trainer_config(trainer_config: dacapo.experiments.trainers.trainer_config.TrainerConfig) -> None
      :abstractmethod:

      Store a trainer config.


   .. py:method:: retrieve_trainer_config(trainer_name: str) -> None
      :abstractmethod:

      Retrieve a trainer config from a trainer name.


   .. py:method:: retrieve_trainer_config_names() -> List[str]
      :abstractmethod:

      Retrieve all trainer config names.


   .. py:method:: delete_trainer_config(trainer_name: str) -> None


   .. py:method:: store_datasplit_config(datasplit_config: dacapo.experiments.datasplits.datasplit_config.DataSplitConfig) -> None
      :abstractmethod:

      Store a datasplit config.


   .. py:method:: retrieve_datasplit_config(datasplit_name: str) -> dacapo.experiments.datasplits.datasplit_config.DataSplitConfig
      :abstractmethod:

      Retrieve a datasplit config from a datasplit name.


   .. py:method:: retrieve_datasplit_config_names() -> List[str]
      :abstractmethod:

      Retrieve all datasplit names.


   .. py:method:: delete_datasplit_config(datasplit_name: str) -> None


   .. py:method:: store_array_config(array_config: dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig) -> None
      :abstractmethod:

      Store a array config.


   .. py:method:: retrieve_array_config(array_name: str) -> dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig
      :abstractmethod:

      Retrieve a array config from a array name.


   .. py:method:: retrieve_array_config_names() -> List[str]
      :abstractmethod:

      Retrieve all array names.


   .. py:method:: delete_array_config(array_name: str) -> None



