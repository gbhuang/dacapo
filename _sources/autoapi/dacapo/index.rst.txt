:py:mod:`dacapo`
================

.. py:module:: dacapo


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   blockwise/index.rst
   compute_context/index.rst
   experiments/index.rst
   ext/index.rst
   gp/index.rst
   store/index.rst
   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   apply/index.rst
   options/index.rst
   plot/index.rst
   predict/index.rst
   train/index.rst
   validate/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.Options



Functions
~~~~~~~~~

.. autoapisummary::

   dacapo.apply
   dacapo.train



.. py:class:: Options


   .. py:method:: instance(**kwargs) -> DaCapoConfig
      :classmethod:


   .. py:method:: config_file() -> Optional[pathlib.Path]
      :classmethod:



.. py:function:: apply(run_name: str, input_container: pathlib.Path | str, input_dataset: str, output_path: pathlib.Path | str, validation_dataset: Optional[dacapo.experiments.datasplits.datasets.dataset.Dataset | str] = None, criterion: str = 'voi', iteration: Optional[int] = None, parameters: Optional[dacapo.experiments.tasks.post_processors.post_processor_parameters.PostProcessorParameters | str] = None, roi: Optional[funlib.geometry.Roi | str] = None, num_workers: int = 12, output_dtype: numpy.dtype | str = np.uint8, overwrite: bool = True, file_format: str = 'zarr')

   Load weights and apply a model to a dataset. If iteration is None, the best iteration based on the criterion is used. If roi is None, the whole input dataset is used.


.. py:function:: train(run_name: str)

   Train a run


