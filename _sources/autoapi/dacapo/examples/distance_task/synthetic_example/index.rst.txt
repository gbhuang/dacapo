:py:mod:`dacapo.examples.distance_task.synthetic_example`
=========================================================

.. py:module:: dacapo.examples.distance_task.synthetic_example

.. autoapi-nested-parse::

   ## Config Store
   To define where the data goes, create a dacapo.yaml configuration file either in `~/.config/dacapo/dacapo.yaml` or in `./dacapo.yaml`. Here is a template:
   ```yaml
   type: files
   runs_base_dir: /path/to/my/data/storage
   ```
   The `runs_base_dir` defines where your on-disk data will be stored. The `type` setting determines the database backend. The default is `files`, which stores the data in a file tree on disk. Alternatively, you can use `mongodb` to store the data in a MongoDB database. To use MongoDB, you will need to provide a `mongodbhost` and `mongodbname` in the configuration file:

   ```yaml
   ...
   mongodbhost: mongodb://dbuser:dbpass@dburl:dbport/
   mongodbname: dacapo



Module Contents
---------------

.. py:data:: config_store

   

.. py:data:: options

   

.. py:data:: runs_base_dir

   

.. py:data:: force
   :value: False

   

.. py:data:: num_workers
   :value: 32

   

.. py:data:: train_data_path

   

.. py:data:: raw_array

   

.. py:data:: validate_data_path

   

.. py:data:: raw_array

   

.. py:data:: options

   

.. py:data:: runs_base_dir

   

.. py:data:: datasplit_config

   

.. py:data:: datasplit

   

.. py:data:: viewer

   

.. py:data:: task_config

   

.. py:data:: architecture_config

   

.. py:data:: trainer_config

   

.. py:data:: start_config

   

.. py:data:: iterations
   :value: 2000

   

.. py:data:: validation_interval

   

.. py:data:: repetitions
   :value: 1

   

.. py:data:: run_config

   

.. py:data:: config_store

   

.. py:data:: run

   

.. py:data:: test_data_path

   

.. py:data:: raw_array

   

