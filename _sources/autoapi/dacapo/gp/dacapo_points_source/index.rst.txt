:py:mod:`dacapo.gp.dacapo_points_source`
========================================

.. py:module:: dacapo.gp.dacapo_points_source


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.gp.dacapo_points_source.GraphSource




.. py:class:: GraphSource(key: gunpowder.GraphKey, graph: gunpowder.Graph)




   Superclass for all nodes in a `gunpowder` graph.

   A :class:`BatchProvider` provides :class:`Batches<Batch>` containing
   :class:`Arrays<Array>` and/or :class:`Graph`. The available data is
   specified in a :class:`ProviderSpec` instance, accessible via :attr:`spec`.

   To create a new node, subclass this class and implement (at least)
   :func:`setup` and :func:`provide`.

   A :class:`BatchProvider` can be linked to any number of other
   :class:`BatchProviders<BatchProvider>` upstream. If your node accepts
   exactly one upstream provider, consider subclassing :class:`BatchFilter`
   instead.

   .. py:method:: setup()

      To be implemented in subclasses.

      Called during initialization of the DAG. Callees can assume that all
      upstream providers are set up already.

      In setup, call :func:`provides` to announce the arrays and points
      provided by this node.


   .. py:method:: provide(request)

      To be implemented in subclasses.

      This function takes a :class:`BatchRequest` and should return the
      corresponding :class:`Batch`.

      :param request: The request to process.
      :type request: :class:`BatchRequest`



