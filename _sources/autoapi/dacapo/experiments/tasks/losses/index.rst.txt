:py:mod:`dacapo.experiments.tasks.losses`
=========================================

.. py:module:: dacapo.experiments.tasks.losses

.. autoapi-nested-parse::

   dacapo losses scripts - imports various loss functions from the library.

   This module consists of classes importing several loss calculation methods used in deep learning.

   Functions:
   :func: .dummy_loss.DummyLoss - A placeholder for a loss function, performs no real calculation.
   :func: .mse_loss.MSELoss - Calculates the Mean Squared Error loss between predicted and actual values.
   :func: .loss.Loss - Generic loss function base class.
   :func: .affinities_loss.AffinitiesLoss - Calculates the loss due to differing input and output affinities.
   :func: .hot_distance_loss.HotDistanceLoss - Calculates the loss based on the distances between hot points in the data.

   Note: The 'noqa' comments are used to instruct flake8 to ignore these lines for linting purposes.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   affinities_loss/index.rst
   dummy_loss/index.rst
   hot_distance_loss/index.rst
   loss/index.rst
   mse_loss/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.tasks.losses.DummyLoss
   dacapo.experiments.tasks.losses.MSELoss
   dacapo.experiments.tasks.losses.Loss
   dacapo.experiments.tasks.losses.AffinitiesLoss
   dacapo.experiments.tasks.losses.HotDistanceLoss




.. py:class:: DummyLoss




   A class representing a dummy loss function that calculates the absolute difference between each prediction and target.

   Inherits the Loss class.

   .. method:: compute(prediction, target, weight=None)

      Calculate the total loss between prediction and target.


   .. py:method:: compute(prediction, target, weight=None)

      Method to calculate the total dummy loss.

      :param prediction: predicted output
      :type prediction: float or int
      :param target: true output
      :type target: float or int
      :param weight: weight parameter for the loss, by default None
      :type weight: float or int, optional

      :returns: Total loss calculated as the sum of absolute differences between prediction and target.
      :rtype: float or int



.. py:class:: MSELoss




   A class used to represent the Mean Square Error Loss function (MSELoss).

   .. attribute:: None



   .. method:: compute(prediction, target, weight):

      Computes the MSELoss with the given weight for the predictiom amd target.


   .. py:method:: compute(prediction, target, weight)

      Function to compute the MSELoss for the provided prediction and target, with respect to the weight.

      Parameters:
      ----------
      prediction : torch.Tensor
          The prediction tensor for which loss needs to be calculated.
      target : torch.Tensor
          The target tensor with respect to which loss is calculated.
      weight : torch.Tensor
          The weight tensor used to weigh the prediction in the loss calculation.

      Returns:
      -------
      :
      torch.Tensor
          The computed MSELoss tensor.



.. py:class:: Loss




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction: torch.Tensor, target: torch.Tensor, weight: Optional[torch.Tensor] = None) -> torch.Tensor
      :abstractmethod:

      Virtual method to compute the loss for the given prediction and target.

      :param prediction: The prediction tensor made by the model.
      :type prediction: torch.Tensor
      :param target: The actual target tensor against which prediction is to be compared.
      :type target: torch.Tensor
      :param weight: The tensor that will be used to apply weightage to the loss. Defaults to None.
      :type weight: torch.Tensor, optional

      :returns: The tensor representing computed loss.
      :rtype: torch.Tensor



.. py:class:: AffinitiesLoss(num_affinities: int, lsds_to_affs_weight_ratio: float)




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction, target, weight)

      Virtual method to compute the loss for the given prediction and target.

      :param prediction: The prediction tensor made by the model.
      :type prediction: torch.Tensor
      :param target: The actual target tensor against which prediction is to be compared.
      :type target: torch.Tensor
      :param weight: The tensor that will be used to apply weightage to the loss. Defaults to None.
      :type weight: torch.Tensor, optional

      :returns: The tensor representing computed loss.
      :rtype: torch.Tensor



.. py:class:: HotDistanceLoss




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction, target, weight)

      Virtual method to compute the loss for the given prediction and target.

      :param prediction: The prediction tensor made by the model.
      :type prediction: torch.Tensor
      :param target: The actual target tensor against which prediction is to be compared.
      :type target: torch.Tensor
      :param weight: The tensor that will be used to apply weightage to the loss. Defaults to None.
      :type weight: torch.Tensor, optional

      :returns: The tensor representing computed loss.
      :rtype: torch.Tensor


   .. py:method:: hot_loss(prediction, target, weight)


   .. py:method:: distance_loss(prediction, target, weight)


   .. py:method:: split(x)



