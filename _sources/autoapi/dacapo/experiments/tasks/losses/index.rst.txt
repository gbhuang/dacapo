:py:mod:`dacapo.experiments.tasks.losses`
=========================================

.. py:module:: dacapo.experiments.tasks.losses


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   affinities_loss/index.rst
   dummy_loss/index.rst
   hot_distance_loss/index.rst
   loss/index.rst
   mse_loss/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.tasks.losses.DummyLoss
   dacapo.experiments.tasks.losses.MSELoss
   dacapo.experiments.tasks.losses.Loss
   dacapo.experiments.tasks.losses.AffinitiesLoss
   dacapo.experiments.tasks.losses.HotDistanceLoss




.. py:class:: DummyLoss




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction, target, weight=None)

      Compute the loss for the given prediction and target. Optionally, if
      given, a loss weight should be considered.

      All arguments are ``torch`` tensors. The return type should be a
      ``torch`` scalar that can be used with an optimizer, just as usual when
      training with ``torch``.



.. py:class:: MSELoss




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction, target, weight)

      Compute the loss for the given prediction and target. Optionally, if
      given, a loss weight should be considered.

      All arguments are ``torch`` tensors. The return type should be a
      ``torch`` scalar that can be used with an optimizer, just as usual when
      training with ``torch``.



.. py:class:: Loss




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction: torch.Tensor, target: torch.Tensor, weight: Optional[torch.Tensor] = None) -> torch.Tensor
      :abstractmethod:

      Compute the loss for the given prediction and target. Optionally, if
      given, a loss weight should be considered.

      All arguments are ``torch`` tensors. The return type should be a
      ``torch`` scalar that can be used with an optimizer, just as usual when
      training with ``torch``.



.. py:class:: AffinitiesLoss(num_affinities: int, lsds_to_affs_weight_ratio: float)




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction, target, weight)

      Compute the loss for the given prediction and target. Optionally, if
      given, a loss weight should be considered.

      All arguments are ``torch`` tensors. The return type should be a
      ``torch`` scalar that can be used with an optimizer, just as usual when
      training with ``torch``.



.. py:class:: HotDistanceLoss




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: compute(prediction, target, weight)

      Compute the loss for the given prediction and target. Optionally, if
      given, a loss weight should be considered.

      All arguments are ``torch`` tensors. The return type should be a
      ``torch`` scalar that can be used with an optimizer, just as usual when
      training with ``torch``.


   .. py:method:: hot_loss(prediction, target, weight)


   .. py:method:: distance_loss(prediction, target, weight)


   .. py:method:: split(x)



