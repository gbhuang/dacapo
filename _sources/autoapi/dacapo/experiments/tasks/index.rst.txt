:py:mod:`dacapo.experiments.tasks`
==================================

.. py:module:: dacapo.experiments.tasks


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   evaluators/index.rst
   losses/index.rst
   post_processors/index.rst
   predictors/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   affinities_task/index.rst
   affinities_task_config/index.rst
   distance_task/index.rst
   distance_task_config/index.rst
   dummy_task/index.rst
   dummy_task_config/index.rst
   hot_distance_task/index.rst
   hot_distance_task_config/index.rst
   inner_distance_task/index.rst
   inner_distance_task_config/index.rst
   one_hot_task/index.rst
   one_hot_task_config/index.rst
   pretrained_task/index.rst
   pretrained_task_config/index.rst
   task/index.rst
   task_config/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.tasks.TaskConfig
   dacapo.experiments.tasks.DummyTaskConfig
   dacapo.experiments.tasks.DummyTask
   dacapo.experiments.tasks.DistanceTaskConfig
   dacapo.experiments.tasks.DistanceTask
   dacapo.experiments.tasks.OneHotTaskConfig
   dacapo.experiments.tasks.OneHotTask
   dacapo.experiments.tasks.PretrainedTaskConfig
   dacapo.experiments.tasks.PretrainedTask
   dacapo.experiments.tasks.AffinitiesTaskConfig
   dacapo.experiments.tasks.AffinitiesTask
   dacapo.experiments.tasks.InnerDistanceTaskConfig
   dacapo.experiments.tasks.InnerDistanceTask
   dacapo.experiments.tasks.HotDistanceTaskConfig
   dacapo.experiments.tasks.HotDistanceTask




.. py:class:: TaskConfig


   Base class for task configurations. Each subclass of a `Task` should
   have a corresponding config class derived from `TaskConfig`.

   .. py:attribute:: name
      :type: str

      

   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Task



.. py:class:: DummyTaskConfig




   This is just a dummy task config used for testing. None of the
   attributes have any particular meaning.

   .. py:attribute:: task_type

      

   .. py:attribute:: embedding_dims
      :type: int

      

   .. py:attribute:: detection_threshold
      :type: float

      

   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Task



.. py:class:: DummyTask(task_config)




   This is just a dummy task for testing.


.. py:class:: DistanceTaskConfig




   This is a Distance task config used for generating and
   evaluating signed distance transforms as a way of generating
   segmentations.

   The advantage of generating distance transforms over regular
   affinities is you can get a denser signal, i.e. 1 misclassified
   pixel in an affinity prediction could merge 2 otherwise very
   distinct objects, this cannot happen with distances.

   .. py:attribute:: task_type

      

   .. py:attribute:: channels
      :type: List[str]

      

   .. py:attribute:: clip_distance
      :type: float

      

   .. py:attribute:: tol_distance
      :type: float

      

   .. py:attribute:: scale_factor
      :type: float

      

   .. py:attribute:: mask_distances
      :type: bool

      

   .. py:attribute:: clipmin
      :type: float

      

   .. py:attribute:: clipmax
      :type: float

      


.. py:class:: DistanceTask(task_config)




   This is just a dummy task for testing.


.. py:class:: OneHotTaskConfig




   This is a One Hot prediction task that outputs a probability vector
   of length `c` for each voxel where `c` is the number of classes.
   Each voxel prediction has all positive values an l1 norm equal to 1.

   Post processing is extremely easy, the class of each voxel is
   simply the argmax over the vector of output probabilities.

   .. py:attribute:: task_type

      

   .. py:attribute:: classes
      :type: List[str]

      


.. py:class:: OneHotTask(task_config)




   Helper class that provides a standard way to create an ABC using
   inheritance.


.. py:class:: PretrainedTaskConfig




   .. py:attribute:: task_type

      

   .. py:attribute:: sub_task_config
      :type: dacapo.experiments.tasks.task_config.TaskConfig

      

   .. py:attribute:: weights
      :type: pathlib.Path

      


.. py:class:: PretrainedTask(task_config)




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: create_model(architecture)



.. py:class:: AffinitiesTaskConfig




   This is a Affinities task config used for generating and
   evaluating voxel affinities for instance segmentations.

   .. py:attribute:: task_type

      

   .. py:attribute:: neighborhood
      :type: List[funlib.geometry.Coordinate]

      

   .. py:attribute:: lsds
      :type: bool

      

   .. py:attribute:: lsds_to_affs_weight_ratio
      :type: float

      

   .. py:attribute:: affs_weight_clipmin
      :type: float

      

   .. py:attribute:: affs_weight_clipmax
      :type: float

      

   .. py:attribute:: lsd_weight_clipmin
      :type: float

      

   .. py:attribute:: lsd_weight_clipmax
      :type: float

      

   .. py:attribute:: background_as_object
      :type: bool

      


.. py:class:: AffinitiesTask(task_config)




   This is a task for generating voxel affinities.


.. py:class:: InnerDistanceTaskConfig




   This is a Distance task config used for generating and
   evaluating signed distance transforms as a way of generating
   segmentations.

   The advantage of generating distance transforms over regular
   affinities is you can get a denser signal, i.e. 1 misclassified
   pixel in an affinity prediction could merge 2 otherwise very
   distinct objects, this cannot happen with distances.

   .. py:attribute:: task_type

      

   .. py:attribute:: channels
      :type: List[str]

      

   .. py:attribute:: clip_distance
      :type: float

      

   .. py:attribute:: tol_distance
      :type: float

      

   .. py:attribute:: scale_factor
      :type: float

      


.. py:class:: InnerDistanceTask(task_config)




   This is just a dummy task for testing.


.. py:class:: HotDistanceTaskConfig




   This is a Hot Distance task config used for generating and
   evaluating signed distance transforms as a way of generating
   segmentations.

   The advantage of generating distance transforms over regular
   affinities is you can get a denser signal, i.e. 1 misclassified
   pixel in an affinity prediction could merge 2 otherwise very
   distinct objects, this cannot happen with distances.

   .. py:attribute:: task_type

      

   .. py:attribute:: channels
      :type: List[str]

      

   .. py:attribute:: clip_distance
      :type: float

      

   .. py:attribute:: tol_distance
      :type: float

      

   .. py:attribute:: scale_factor
      :type: float

      

   .. py:attribute:: mask_distances
      :type: bool

      


.. py:class:: HotDistanceTask(task_config)




   This is just a Hot Distance Task that combine Binary and distance prediction.


