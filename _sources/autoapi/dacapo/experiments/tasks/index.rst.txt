:py:mod:`dacapo.experiments.tasks`
==================================

.. py:module:: dacapo.experiments.tasks


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   evaluators/index.rst
   losses/index.rst
   post_processors/index.rst
   predictors/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   affinities_task/index.rst
   affinities_task_config/index.rst
   distance_task/index.rst
   distance_task_config/index.rst
   dummy_task/index.rst
   dummy_task_config/index.rst
   hot_distance_task/index.rst
   hot_distance_task_config/index.rst
   inner_distance_task/index.rst
   inner_distance_task_config/index.rst
   one_hot_task/index.rst
   one_hot_task_config/index.rst
   pretrained_task/index.rst
   pretrained_task_config/index.rst
   task/index.rst
   task_config/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.tasks.Task
   dacapo.experiments.tasks.TaskConfig
   dacapo.experiments.tasks.DummyTaskConfig
   dacapo.experiments.tasks.DummyTask
   dacapo.experiments.tasks.DistanceTaskConfig
   dacapo.experiments.tasks.DistanceTask
   dacapo.experiments.tasks.OneHotTaskConfig
   dacapo.experiments.tasks.OneHotTask
   dacapo.experiments.tasks.PretrainedTaskConfig
   dacapo.experiments.tasks.PretrainedTask
   dacapo.experiments.tasks.AffinitiesTaskConfig
   dacapo.experiments.tasks.AffinitiesTask
   dacapo.experiments.tasks.InnerDistanceTaskConfig
   dacapo.experiments.tasks.InnerDistanceTask
   dacapo.experiments.tasks.HotDistanceTaskConfig
   dacapo.experiments.tasks.HotDistanceTask




.. py:class:: Task




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: parameters
      :type: Iterable[dacapo.experiments.tasks.post_processors.PostProcessorParameters]


   .. py:property:: evaluation_scores
      :type: dacapo.experiments.tasks.evaluators.EvaluationScores


   .. py:attribute:: predictor
      :type: dacapo.experiments.tasks.predictors.Predictor

      

   .. py:attribute:: loss
      :type: dacapo.experiments.tasks.losses.Loss

      

   .. py:attribute:: evaluator
      :type: dacapo.experiments.tasks.evaluators.Evaluator

      

   .. py:attribute:: post_processor
      :type: dacapo.experiments.tasks.post_processors.PostProcessor

      

   .. py:method:: create_model(architecture)



.. py:class:: TaskConfig


   Base class for task configurations. Each subclass of a `Task` should
   have a corresponding config class derived from `TaskConfig`.

   .. py:attribute:: name
      :type: str

      

   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Task



.. py:class:: DummyTaskConfig




   A class for creating a dummy task configuration object.

   This class extends the TaskConfig class and initializes dummy task configuration
   with default attributes. It is mainly used for testing aspects
   of the application without the need of creating real task configurations.

   .. attribute:: task_type

      The type of task. Here, set to DummyTask.

      :type: cls

   .. attribute:: embedding_dims

      A dummy attribute represented as an integer.

      :type: int

   .. attribute:: detection_threshold

      Another dummy attribute represented as a float.

      :type: float

   .. py:attribute:: task_type

      

   .. py:attribute:: embedding_dims
      :type: int

      

   .. py:attribute:: detection_threshold
      :type: float

      

   .. py:method:: verify() -> Tuple[bool, str]

      A method to verify the dummy task configuration.

      Whenever called, this method always returns False and a statement showing
      that the DummyTaskConfig object is never valid.

      :returns: A tuple containing a boolean status and a string message.
      :rtype: tuple



.. py:class:: DummyTask(task_config)




   A dummy task class that initializes all components (predictor, loss,
   post-processing, and evaluator) for the dummy task. Primarily used for testing purposes.
   Inherits from the Task class.

   .. attribute:: predictor

      Instance of DummyPredictor class.

      :type: Object

   .. attribute:: loss

      Instance of DummyLoss class.

      :type: Object

   .. attribute:: post_processor

      Instance of DummyPostProcessor class.

      :type: Object

   .. attribute:: evaluator

      Instance of DummyEvaluator class.

      :type: Object


.. py:class:: DistanceTaskConfig




   This is a Distance task config used for generating and
   evaluating signed distance transforms as a way of generating
   segmentations.

   The advantage of generating distance transforms over regular
   affinities is you can get a denser signal, i.e. 1 misclassified
   pixel in an affinity prediction could merge 2 otherwise very
   distinct objects, this cannot happen with distances.

   .. py:attribute:: task_type

      

   .. py:attribute:: channels
      :type: List[str]

      

   .. py:attribute:: clip_distance
      :type: float

      

   .. py:attribute:: tol_distance
      :type: float

      

   .. py:attribute:: scale_factor
      :type: float

      

   .. py:attribute:: mask_distances
      :type: bool

      

   .. py:attribute:: clipmin
      :type: float

      

   .. py:attribute:: clipmax
      :type: float

      


.. py:class:: DistanceTask(task_config)




   DistanceTask is a subclass of Task for handling tasks associated
   with Distance.

   DistanceTask uses `DistancePredictor` for prediction, `MSELoss` for
   computing loss, `ThresholdPostProcessor` for post-processing the
   prediction, and `BinarySegmentationEvaluator` for evaluating the
   prediction.

   .. attribute:: predictor

      DistancePredictor object

   .. attribute:: loss

      MSELoss object

   .. attribute:: post_processor

      ThresholdPostProcessor object

   .. attribute:: evaluator

      BinarySegmentationEvaluator object


.. py:class:: OneHotTaskConfig




   Class that derives from the TaskConfig to perform one hot prediction tasks.

   .. attribute:: task_type

      the type of task, in this case, OneHotTask.

   .. attribute:: classes

      a List of classes which starts from id 0.

   .. method:: None

      
      

   .. note:: The class of each voxel is simply the argmax over the vector of output probabilities.

   .. py:attribute:: task_type

      

   .. py:attribute:: classes
      :type: List[str]

      


.. py:class:: OneHotTask(task_config)




   Helper class that provides a standard way to create an ABC using
   inheritance.


.. py:class:: PretrainedTaskConfig




   .. py:attribute:: task_type

      

   .. py:attribute:: sub_task_config
      :type: dacapo.experiments.tasks.task_config.TaskConfig

      

   .. py:attribute:: weights
      :type: pathlib.Path

      


.. py:class:: PretrainedTask(task_config)




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: create_model(architecture)



.. py:class:: AffinitiesTaskConfig




   This is a Affinities task config used for generating and
   evaluating voxel affinities for instance segmentations.

   .. py:attribute:: task_type

      

   .. py:attribute:: neighborhood
      :type: List[funlib.geometry.Coordinate]

      

   .. py:attribute:: lsds
      :type: bool

      

   .. py:attribute:: lsds_to_affs_weight_ratio
      :type: float

      

   .. py:attribute:: affs_weight_clipmin
      :type: float

      

   .. py:attribute:: affs_weight_clipmax
      :type: float

      

   .. py:attribute:: lsd_weight_clipmin
      :type: float

      

   .. py:attribute:: lsd_weight_clipmax
      :type: float

      

   .. py:attribute:: background_as_object
      :type: bool

      


.. py:class:: AffinitiesTask(task_config)




   This is a task for generating voxel affinities.


.. py:class:: InnerDistanceTaskConfig




   This is a Distance task config used for generating and
   evaluating signed distance transforms as a way of generating
   segmentations.

   The advantage of generating distance transforms over regular
   affinities is you can get a denser signal, i.e. 1 misclassified
   pixel in an affinity prediction could merge 2 otherwise very
   distinct objects, this cannot happen with distances.

   .. py:attribute:: task_type

      

   .. py:attribute:: channels
      :type: List[str]

      

   .. py:attribute:: clip_distance
      :type: float

      

   .. py:attribute:: tol_distance
      :type: float

      

   .. py:attribute:: scale_factor
      :type: float

      


.. py:class:: InnerDistanceTask(task_config)




   This class extends the Task class for creating tasks related to computing inner distances.
   It provides methods for prediction, loss calculation and post-processing. It includes Binary Segmentation Evaluator for evaluation.

   .. attribute:: task_config

      The configuration for the task.

   .. attribute:: predictor

      Used for predicting the inner distances.

   .. attribute:: loss

      Used for calculating the mean square error loss.

   .. attribute:: post_processor

      Used for applying threshold post-processing.

   .. attribute:: evaluator

      Used for evaluating the results using binary segmentation.


.. py:class:: HotDistanceTaskConfig




   Class for generating TaskConfigs for the HotDistanceTask, which predicts one hot encodings of classes, as well as signed distance transforms of those classes.

   .. attribute:: task_type

      A reference to the Hot Distance Task class.

   .. attribute:: channels

      A list of channel names.

      :type: List[str]

   .. attribute:: clip_distance

      Maximum distance to consider for false positive/negatives.

      :type: float

   .. attribute:: tol_distance

      Tolerance distance for counting false positives/negatives.

      :type: float

   .. attribute:: scale_factor

      The amount by which to scale distances before applying
      a tanh normalization. Defaults to 1.

      :type: float

   .. attribute:: mask_distances

      Whether or not to mask out regions where the true distance to
      object boundary cannot be known. Defaults to False

      :type: bool

   .. note::

      Generating distance transforms over regular affinities provides you with a denser
      signal, i.e., one misclassified pixel in an affinity prediction can merge 2
      otherwise very distinct objects, a situation that cannot happen with distances.

   .. py:attribute:: task_type

      

   .. py:attribute:: channels
      :type: List[str]

      

   .. py:attribute:: clip_distance
      :type: float

      

   .. py:attribute:: tol_distance
      :type: float

      

   .. py:attribute:: scale_factor
      :type: float

      

   .. py:attribute:: mask_distances
      :type: bool

      


.. py:class:: HotDistanceTask(task_config)




   A class to represent a hot distance task that use binary prediction and distance prediction.

   Inherits from Task class.

   .. attribute:: predictor

      HotDistancePredictor object.

   .. attribute:: loss

      HotDistanceLoss object.

   .. attribute:: post_processor

      ThresholdPostProcessor object.

   .. attribute:: evaluator

      BinarySegmentationEvaluator object.


