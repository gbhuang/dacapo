:py:mod:`dacapo.experiments.architectures`
==========================================

.. py:module:: dacapo.experiments.architectures


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   architecture/index.rst
   architecture_config/index.rst
   cnnectome_unet/index.rst
   cnnectome_unet_config/index.rst
   dummy_architecture/index.rst
   dummy_architecture_config/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.architectures.Architecture
   dacapo.experiments.architectures.ArchitectureConfig
   dacapo.experiments.architectures.DummyArchitectureConfig
   dacapo.experiments.architectures.DummyArchitecture
   dacapo.experiments.architectures.CNNectomeUNetConfig
   dacapo.experiments.architectures.CNNectomeUNet




.. py:class:: Architecture(*args, **kwargs)




   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: input_shape
      :type: funlib.geometry.Coordinate
      :abstractmethod:

      The spatial input shape (i.e., not accounting for channels and batch
      dimensions) of this architecture.

   .. py:property:: eval_shape_increase
      :type: funlib.geometry.Coordinate

      How much to increase the input shape during prediction.

   .. py:property:: num_in_channels
      :type: int
      :abstractmethod:

      Return the number of input channels this architecture expects.

   .. py:property:: num_out_channels
      :type: int
      :abstractmethod:

      Return the number of output channels of this architecture.

   .. py:property:: dims
      :type: int


   .. py:method:: scale(input_voxel_size: funlib.geometry.Coordinate) -> funlib.geometry.Coordinate



.. py:class:: ArchitectureConfig


   Base class for architecture configurations. Each subclass of an
   `Architecture` should have a corresponding config class derived from
   `ArchitectureConfig`.

   .. py:attribute:: name
      :type: str

      

   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid architecture



.. py:class:: DummyArchitectureConfig




   This is just a dummy architecture config used for testing. None of the
   attributes have any particular meaning.

   .. py:attribute:: architecture_type

      

   .. py:attribute:: num_in_channels
      :type: int

      

   .. py:attribute:: num_out_channels
      :type: int

      

   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid architecture



.. py:class:: DummyArchitecture(architecture_config)




   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: input_shape

      The spatial input shape (i.e., not accounting for channels and batch
      dimensions) of this architecture.

   .. py:property:: num_in_channels

      Return the number of input channels this architecture expects.

   .. py:property:: num_out_channels

      Return the number of output channels of this architecture.

   .. py:method:: forward(x)



.. py:class:: CNNectomeUNetConfig




   This class configures the CNNectomeUNet based on
   https://github.com/saalfeldlab/CNNectome/blob/master/CNNectome/networks/unet_class.py

   Includes support for super resolution via the upsampling factors.

   .. py:attribute:: architecture_type

      

   .. py:attribute:: input_shape
      :type: funlib.geometry.Coordinate

      

   .. py:attribute:: fmaps_out
      :type: int

      

   .. py:attribute:: fmaps_in
      :type: int

      

   .. py:attribute:: num_fmaps
      :type: int

      

   .. py:attribute:: fmap_inc_factor
      :type: int

      

   .. py:attribute:: downsample_factors
      :type: List[funlib.geometry.Coordinate]

      

   .. py:attribute:: kernel_size_down
      :type: Optional[List[funlib.geometry.Coordinate]]

      

   .. py:attribute:: kernel_size_up
      :type: Optional[List[funlib.geometry.Coordinate]]

      

   .. py:attribute:: upsample_factors
      :type: Optional[List[funlib.geometry.Coordinate]]

      

   .. py:attribute:: constant_upsample
      :type: bool

      

   .. py:attribute:: padding
      :type: str

      

   .. py:attribute:: use_attention
      :type: bool

      


.. py:class:: CNNectomeUNet(architecture_config)




   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: eval_shape_increase

      How much to increase the input shape during prediction.

   .. py:property:: input_shape

      The spatial input shape (i.e., not accounting for channels and batch
      dimensions) of this architecture.

   .. py:property:: num_in_channels
      :type: int

      Return the number of input channels this architecture expects.

   .. py:property:: num_out_channels
      :type: int

      Return the number of output channels of this architecture.

   .. py:method:: module()


   .. py:method:: scale(voxel_size)


   .. py:method:: forward(x)



