:py:mod:`dacapo.experiments.trainers.trainer`
=============================================

.. py:module:: dacapo.experiments.trainers.trainer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.trainers.trainer.Trainer




.. py:class:: Trainer




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: iteration
      :type: int

      

   .. py:attribute:: batch_size
      :type: int

      

   .. py:attribute:: learning_rate
      :type: float

      

   .. py:method:: create_optimizer(model: dacapo.experiments.model.Model) -> torch.optim.Optimizer
      :abstractmethod:

      Create a ``torch`` optimizer for the given model.


   .. py:method:: iterate(num_iterations: int, model: dacapo.experiments.model.Model, optimizer: torch.optim.Optimizer, device: torch.device) -> Iterator[dacapo.experiments.training_iteration_stats.TrainingIterationStats]
      :abstractmethod:

      Perform ``num_iterations`` training iterations.


   .. py:method:: can_train(datasets: List[dacapo.experiments.datasplits.datasets.Dataset]) -> bool
      :abstractmethod:

      Can this trainer train with a specific set of datasets. Some trainers
      may have requirements for their training datasets.


   .. py:method:: build_batch_provider(datasets: List[dacapo.experiments.datasplits.datasets.Dataset], model: dacapo.experiments.model.Model, task: dacapo.experiments.tasks.task.Task, snapshot_container: dacapo.store.array_store.LocalContainerIdentifier) -> None
      :abstractmethod:

      Initialize the training pipeline using the datasets, model, task
      and snapshot_container

      The training datasets are required s.t. the pipeline knows where to pull
      data from.
      The model is needed to inform the pipeline of required input/output sizes
      The task is needed to transform gt into target
      The snapshot_container defines where snapshots will be saved.



