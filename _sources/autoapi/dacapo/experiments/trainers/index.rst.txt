:py:mod:`dacapo.experiments.trainers`
=====================================

.. py:module:: dacapo.experiments.trainers


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   gp_augments/index.rst
   optimizers/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   dummy_trainer/index.rst
   dummy_trainer_config/index.rst
   gunpowder_trainer/index.rst
   gunpowder_trainer_config/index.rst
   trainer/index.rst
   trainer_config/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.trainers.Trainer
   dacapo.experiments.trainers.TrainerConfig
   dacapo.experiments.trainers.DummyTrainerConfig
   dacapo.experiments.trainers.DummyTrainer
   dacapo.experiments.trainers.GunpowderTrainerConfig
   dacapo.experiments.trainers.GunpowderTrainer
   dacapo.experiments.trainers.AugmentConfig




.. py:class:: Trainer




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: iteration
      :type: int

      

   .. py:attribute:: batch_size
      :type: int

      

   .. py:attribute:: learning_rate
      :type: float

      

   .. py:method:: create_optimizer(model: dacapo.experiments.model.Model) -> torch.optim.Optimizer
      :abstractmethod:

      Create a ``torch`` optimizer for the given model.


   .. py:method:: iterate(num_iterations: int, model: dacapo.experiments.model.Model, optimizer: torch.optim.Optimizer, device: torch.device) -> Iterator[dacapo.experiments.training_iteration_stats.TrainingIterationStats]
      :abstractmethod:

      Perform ``num_iterations`` training iterations.


   .. py:method:: can_train(datasets: List[dacapo.experiments.datasplits.datasets.Dataset]) -> bool
      :abstractmethod:

      Can this trainer train with a specific set of datasets. Some trainers
      may have requirements for their training datasets.


   .. py:method:: build_batch_provider(datasets: List[dacapo.experiments.datasplits.datasets.Dataset], model: dacapo.experiments.model.Model, task: dacapo.experiments.tasks.task.Task, snapshot_container: dacapo.store.array_store.LocalContainerIdentifier) -> None
      :abstractmethod:

      Initialize the training pipeline using the datasets, model, task
      and snapshot_container

      The training datasets are required s.t. the pipeline knows where to pull
      data from.
      The model is needed to inform the pipeline of required input/output sizes
      The task is needed to transform gt into target
      The snapshot_container defines where snapshots will be saved.



.. py:class:: TrainerConfig


   Base class for trainer configurations. Each subclass of a `Trainer`
   should have a corresponding config class derived from `TrainerConfig`.

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: batch_size
      :type: int

      

   .. py:attribute:: learning_rate
      :type: float

      

   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Trainer



.. py:class:: DummyTrainerConfig




   This is just a dummy trainer config used for testing. None of the
   attributes have any particular meaning.

   .. py:attribute:: trainer_type

      

   .. py:attribute:: mirror_augment
      :type: bool

      

   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Trainer



.. py:class:: DummyTrainer(trainer_config)




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: iteration
      :value: 0

      

   .. py:method:: create_optimizer(model)

      Create a ``torch`` optimizer for the given model.


   .. py:method:: iterate(num_iterations: int, model: dacapo.experiments.model.Model, optimizer, device)

      Perform ``num_iterations`` training iterations.


   .. py:method:: build_batch_provider(datasplit, architecture, task, snapshot_container)

      Initialize the training pipeline using the datasets, model, task
      and snapshot_container

      The training datasets are required s.t. the pipeline knows where to pull
      data from.
      The model is needed to inform the pipeline of required input/output sizes
      The task is needed to transform gt into target
      The snapshot_container defines where snapshots will be saved.


   .. py:method:: can_train(datasplit)

      Can this trainer train with a specific set of datasets. Some trainers
      may have requirements for their training datasets.



.. py:class:: GunpowderTrainerConfig




   Base class for trainer configurations. Each subclass of a `Trainer`
   should have a corresponding config class derived from `TrainerConfig`.

   .. py:attribute:: trainer_type

      

   .. py:attribute:: num_data_fetchers
      :type: int

      

   .. py:attribute:: augments
      :type: List[dacapo.experiments.trainers.gp_augments.AugmentConfig]

      

   .. py:attribute:: snapshot_interval
      :type: Optional[int]

      

   .. py:attribute:: min_masked
      :type: Optional[float]

      

   .. py:attribute:: clip_raw
      :type: bool

      


.. py:class:: GunpowderTrainer(trainer_config)




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: iteration
      :value: 0

      

   .. py:method:: create_optimizer(model)

      Create a ``torch`` optimizer for the given model.


   .. py:method:: build_batch_provider(datasets, model, task, snapshot_container=None)

      Initialize the training pipeline using the datasets, model, task
      and snapshot_container

      The training datasets are required s.t. the pipeline knows where to pull
      data from.
      The model is needed to inform the pipeline of required input/output sizes
      The task is needed to transform gt into target
      The snapshot_container defines where snapshots will be saved.


   .. py:method:: iterate(num_iterations, model, optimizer, device)

      Perform ``num_iterations`` training iterations.


   .. py:method:: next()


   .. py:method:: can_train(datasets) -> bool

      Can this trainer train with a specific set of datasets. Some trainers
      may have requirements for their training datasets.



.. py:class:: AugmentConfig




   Base class for gunpowder augment configurations. Each subclass of a `Augment`
   should have a corresponding config class derived from `AugmentConfig`.

   .. py:method:: node(raw_key: gunpowder.ArrayKey, gt_key: gunpowder.ArrayKey, mask_key: gunpowder.ArrayKey) -> gunpowder.BatchFilter
      :abstractmethod:

      return a gunpowder node that performs this augmentation



