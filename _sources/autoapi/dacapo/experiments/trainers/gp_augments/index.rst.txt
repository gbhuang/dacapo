:py:mod:`dacapo.experiments.trainers.gp_augments`
=================================================

.. py:module:: dacapo.experiments.trainers.gp_augments


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   augment_config/index.rst
   elastic_config/index.rst
   gamma_config/index.rst
   intensity_config/index.rst
   intensity_scale_shift_config/index.rst
   simple_config/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.experiments.trainers.gp_augments.AugmentConfig
   dacapo.experiments.trainers.gp_augments.ElasticAugmentConfig
   dacapo.experiments.trainers.gp_augments.SimpleAugmentConfig
   dacapo.experiments.trainers.gp_augments.GammaAugmentConfig
   dacapo.experiments.trainers.gp_augments.IntensityAugmentConfig
   dacapo.experiments.trainers.gp_augments.IntensityScaleShiftAugmentConfig




.. py:class:: AugmentConfig




   Base class for gunpowder augment configurations. Each subclass of a `Augment`
   should have a corresponding config class derived from `AugmentConfig`.

   .. py:method:: node(raw_key: gunpowder.ArrayKey, gt_key: gunpowder.ArrayKey, mask_key: gunpowder.ArrayKey) -> gunpowder.BatchFilter
      :abstractmethod:

      return a gunpowder node that performs this augmentation



.. py:class:: ElasticAugmentConfig




   Base class for gunpowder augment configurations. Each subclass of a `Augment`
   should have a corresponding config class derived from `AugmentConfig`.

   .. py:attribute:: control_point_spacing
      :type: List[int]

      

   .. py:attribute:: control_point_displacement_sigma
      :type: List[float]

      

   .. py:attribute:: rotation_interval
      :type: Tuple[float, float]

      

   .. py:attribute:: subsample
      :type: int

      

   .. py:attribute:: uniform_3d_rotation
      :type: bool

      

   .. py:method:: node(_raw_key=None, _gt_key=None, _mask_key=None)

      return a gunpowder node that performs this augmentation



.. py:class:: SimpleAugmentConfig




   Base class for gunpowder augment configurations. Each subclass of a `Augment`
   should have a corresponding config class derived from `AugmentConfig`.

   .. py:method:: node(_raw_key=None, _gt_key=None, _mask_key=None)

      return a gunpowder node that performs this augmentation



.. py:class:: GammaAugmentConfig




   Base class for gunpowder augment configurations. Each subclass of a `Augment`
   should have a corresponding config class derived from `AugmentConfig`.

   .. py:attribute:: gamma_range
      :type: Tuple[float, float]

      

   .. py:method:: node(raw_key: gunpowder.ArrayKey, _gt_key=None, _mask_key=None)

      return a gunpowder node that performs this augmentation



.. py:class:: IntensityAugmentConfig




   Base class for gunpowder augment configurations. Each subclass of a `Augment`
   should have a corresponding config class derived from `AugmentConfig`.

   .. py:attribute:: scale
      :type: Tuple[float, float]

      

   .. py:attribute:: shift
      :type: Tuple[float, float]

      

   .. py:attribute:: clip
      :type: bool

      

   .. py:method:: node(raw_key: gunpowder.ArrayKey, _gt_key=None, _mask_key=None)

      return a gunpowder node that performs this augmentation



.. py:class:: IntensityScaleShiftAugmentConfig




   Base class for gunpowder augment configurations. Each subclass of a `Augment`
   should have a corresponding config class derived from `AugmentConfig`.

   .. py:attribute:: scale
      :type: float

      

   .. py:attribute:: shift
      :type: float

      

   .. py:method:: node(raw_key: gunpowder.ArrayKey, _gt_key=None, _mask_key=None)

      return a gunpowder node that performs this augmentation



