:py:mod:`dacapo.compute_context`
================================

.. py:module:: dacapo.compute_context


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   bsub/index.rst
   compute_context/index.rst
   local_torch/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   dacapo.compute_context.ComputeContext
   dacapo.compute_context.LocalTorch
   dacapo.compute_context.Bsub



Functions
~~~~~~~~~

.. autoapisummary::

   dacapo.compute_context.create_compute_context



.. py:class:: ComputeContext




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: device
      :abstractmethod:


   .. py:method:: wrap_command(command)


   .. py:method:: execute(command)



.. py:function:: create_compute_context()

   Create a compute context based on the global DaCapo options.


.. py:class:: LocalTorch




   The LocalTorch class is a subclass of the ComputeContext class.
   It is used to specify the context in which computations are to be done.
   LocalTorch is used to specify that computations are to be done on the local machine using PyTorch.

   .. attribute:: _device

      This stores the type of device on which torch computations are to be done. It can

      :type: Optional[str]

   .. attribute:: take "cuda" for GPU or "cpu" for CPU. None value results in automatic detection of device type.

      

   .. py:property:: device

      A property method that returns the torch device object. It automatically detects and uses "cuda" (GPU) if
      available, else it falls back on using "cpu".


.. py:class:: Bsub




   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:property:: device


   .. py:attribute:: queue
      :type: str

      

   .. py:attribute:: num_gpus
      :type: int

      

   .. py:attribute:: num_cpus
      :type: int

      

   .. py:attribute:: billing
      :type: Optional[str]

      


